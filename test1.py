# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lab3_ib.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import base64
import hashlib

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog

class AdditiveGenerator:
    def __init__(self, seed):
        self.state = seed

    def generate(self, size):
        result = b""
        for _ in range(size):
            self.state = (self.state * 1103515245 + 12345) & 0xFFFFFFFF
            result += bytes([self.state & 0xFF])
        return result

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(862, 540)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 0, 251, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(530, 0, 251, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.encryptButton = QtWidgets.QPushButton(self.centralwidget)
        self.encryptButton.setGeometry(QtCore.QRect(10, 460, 411, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.encryptButton.setFont(font)
        self.encryptButton.setObjectName("encryptButton")
        self.decryptButton = QtWidgets.QPushButton(self.centralwidget)
        self.decryptButton.setGeometry(QtCore.QRect(440, 460, 411, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.decryptButton.setFont(font)
        self.decryptButton.setObjectName("decryptButton")
        self.password = QtWidgets.QLineEdit(self.centralwidget)
        self.password.setGeometry(QtCore.QRect(150, 360, 701, 41))
        self.password.setObjectName("password")
        self.hash_text = QtWidgets.QTextBrowser(self.centralwidget)
        self.hash_text.setGeometry(QtCore.QRect(150, 410, 701, 41))
        self.hash_text.setObjectName("hash_text")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 360, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 410, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.load_decrypted_file = QtWidgets.QPushButton(self.centralwidget)
        self.load_decrypted_file.setGeometry(QtCore.QRect(12, 300, 411, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.load_decrypted_file.setFont(font)
        self.load_decrypted_file.setObjectName("load_decrypted_file")
        self.load_encrypted_file = QtWidgets.QPushButton(self.centralwidget)
        self.load_encrypted_file.setGeometry(QtCore.QRect(440, 300, 411, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.load_encrypted_file.setFont(font)
        self.load_encrypted_file.setObjectName("load_encrypted_file")

        self.load_decrypted_file.clicked.connect(lambda: self.load_sequence("decrypt"))
        self.load_encrypted_file.clicked.connect(lambda: self.load_sequence("encrypt"))
        self.decryptButton.clicked.connect(lambda: self.process_text_blocks("decrypt"))
        self.encryptButton.clicked.connect(lambda: self.process_text_blocks("encrypt"))

        self.decrypted_text = QtWidgets.QTextEdit(self.centralwidget)
        self.decrypted_text.setGeometry(QtCore.QRect(10, 40, 411, 251))
        self.decrypted_text.setObjectName("decrypted_text")
        self.encrypted_text = QtWidgets.QTextEdit(self.centralwidget)
        self.encrypted_text.setGeometry(QtCore.QRect(440, 40, 411, 251))
        self.encrypted_text.setObjectName("encrypted_text")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Дешифрованный текст"))
        self.label_2.setText(_translate("MainWindow", "Зашифрованный текст"))
        self.encryptButton.setText(_translate("MainWindow", "Зашифровать"))
        self.decryptButton.setText(_translate("MainWindow", "Дешифровать"))
        self.label_3.setText(_translate("MainWindow", "Пароль"))
        self.label_4.setText(_translate("MainWindow", "Хэш пароля"))
        self.load_decrypted_file.setText(_translate("MainWindow", "Загрузить файл для шифрования"))
        self.load_encrypted_file.setText(_translate("MainWindow", "Загрузить файл для дешифрования"))

    # загрузка текста из файла
    def load_sequence(self, mode):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly

        # Открываем файловый диалог для выбора файла
        file_dialog = QFileDialog()
        file_paths, _ = file_dialog.getOpenFileNames(None, "Выберите файл", "", "Текстовые файлы (*.txt);;Все файлы (*)", options=options)

        if file_paths:
            # Выбран хотя бы один файл
            file_path = file_paths[0]

            try:
                with open(file_path, 'r') as file:
                    sequence_str = file.read()

                # Выведите последовательность
                if mode == "encrypt":
                    self.encrypted_text.setPlainText(sequence_str)
                elif mode == "decrypt":
                    self.decrypted_text.setPlainText(sequence_str)
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Ошибка", f"Ошибка при чтении файла: {str(e)}")

    def hash_password_md4(self, password):
        password_bytes = password.encode('utf-8')
        md4_hash = hashlib.new('md4')
        md4_hash.update(password_bytes)
        print(md4_hash.hexdigest())
        self.hash_text.setText(md4_hash.hexdigest())
        return md4_hash.digest()


    # def process_text_blocks(self, mode):
    #     password = self.password.text()
    #     print(password)
    #     key = self.hash_password_md4(password)
    #
    #     generator = AdditiveGenerator(int.from_bytes(key, byteorder='big'))
    #     # Преобразовать текст в байты
    #     block_size = 1024
    #     if mode == 'encrypt':
    #         text = self.decrypted_text.toPlainText()
    #     elif mode == 'decrypt':
    #         text = self.encrypted_text.toPlainText()
    #
    #     #data_bytes = text.encode('utf-8')
    #     data_bytes = text.encode('latin-1', errors='replace')
    #
    #     result = bytearray()
    #
    #     # Обработать данные блоками
    #     for i in range(0, len(data_bytes), block_size):
    #         block = data_bytes[i:i + block_size]
    #
    #         if mode == 'encrypt':
    #             processed_block = bytes(x ^ y for x, y in zip(block, generator.generate(len(block))))
    #         elif mode == 'decrypt':
    #             processed_block = bytes(x ^ y for x, y in zip(block, generator.generate(len(block))))
    #
    #         result.extend(processed_block)
    #
    #     # Преобразовать байты обратно в строку (если необходимо)
    #     #processed_text = result.decode('utf-8')
    #     processed_text = result.decode('latin-1', errors='replace')
    #
    #     if mode == 'encrypt':
    #         self.encrypted_text.setText(processed_text)
    #         with open("encrypt.txt", 'w', encoding='latin-1') as f_out:
    #             f_out.write(processed_text)
    #     elif mode == 'decrypt':
    #         self.decrypted_text.setText(processed_text)
    #         with open("decrypt.txt", 'w', encoding='latin-1') as f_out:
    #             f_out.write(processed_text)

    def encrypt_decrypt_file(self, input_file, output_file, password, mode):
        block_size = 1024
        key = self.hash_password_md4(password)
        generator = AdditiveGenerator(int.from_bytes(key, byteorder='big'))

        with open(input_file, 'rb') as f_in, open(output_file, 'wb') as f_out:
            while True:
                data = f_in.read(block_size)
                if not data:
                    break

                if mode == 'encrypt':
                    encrypted_data = bytes(x ^ y for x, y in zip(data, generator.generate(len(data))))
                    f_out.write(encrypted_data)
                elif mode == 'decrypt':
                    decrypted_data = bytes(x ^ y for x, y in zip(data, generator.generate(len(data))))
                    f_out.write(decrypted_data)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
